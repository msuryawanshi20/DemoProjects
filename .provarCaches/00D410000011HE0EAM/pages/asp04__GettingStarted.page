<apex:page controller="asp04.AsperatoSetupVFController" lightningStyleSheets="true" tabStyle="Getting_Started__tab">
<apex:slds />

<style>
.hidden {
    display: none;
}

.big {
    font-size: 12pt;
    font-weight: bold;
}

.warning {
    color: darkorange;
}

.warning::before {
    content: "⚠";
    padding-right: 10px;
}

.supportsection {

}

.nopsp::before {
    content: "⚠";
    padding-right: 10px;
}

.nopsp {
  color: darkgoldenrod;
  font-weight: bold;
  display: none;  
  margin-bottom: 10px;
}

.addbutton {
  color: green !important;
  font-style: italic;
}

.success {
    font-size: 1.5em;
    color: green;
    font-weight: bold;
    margin-bottom: 10px;
}

.success::before {
    content: "✓";
    padding-right: 10px;
}

.spinner {
    margin-left: 200px;
}

.pspconnections {
  display:inline-block; 
  padding-top: 5px;
  padding-bottom: 5px;
  margin-top: 5px;
  margin-bottom: 5px;
}

.pspconnections .pspcon {
  font-size: 10pt;
  margin-bottom: 5px;
}

.pspconnections .pspconcurblock {
  padding: 5px;
  margin-top: 10px;
  margin-bottom: 10px;
  border: 1px solid #EFEFEF;
  min-width: 500px;
}

.pspconnections .pspconcurheading {
  font-weight: bold;
  font-size: 16pt;
}

.pspconnections .pspconmode {
  margin-right: 5px;
  font-weight: bold;
}

.pspconnections .pspcondel {
  margin-right: 20px;
  float: right;
}

.psp-connecting:before {
    content: "...";
    font-weight: bold;
    float: left;
    margin-right: 10px;
}

.psp-connected:before {
    content: "✓";
    color: darkgreen;
    font-weight: bold;
    float: left;
    margin-right: 10px;
}

.psp-not-connected:before {
    content: "✘";
    color: darkred;
    font-weight: bold;
    float: left;
    margin-right: 10px;
}

.pspconnectiondialog-label {
    display: block;
}

.pspconnectiondialog-inputsection {
    margin-top: 5px;
    margin-bottom: 5px;
}

.pspconnectiondialog-label.required::before {
    content: "* ";
    color: red;
}
</style>

<script>
    var pspTypes  = {};
    function checkPSPStatus(cur, mode, pspgroup) {
      Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.AsperatoSetupVFController.getConnectionStatus}',
          cur, mode, pspgroup,
          function(result, event){
            if (event.status) {
              var pspconele = document.getElementById("pspcon-" + cur + "-" + mode + "-" + pspgroup);
              pspconele.classList.remove("psp-connecting");
              if(result) {
                pspconele.classList.add("psp-connected");
              }
              else {
                pspconele.classList.add("psp-not-connected");
              }
            } else if (event.type === 'exception') {
              console.log(event.message + " - " + event.where);
            } else {
              console.log(event.message);
            }
          },
          { buffer: false, escape: true, timeout: 30000 }
      );
    }
 
    var sfConnectRedir = function(redir){
      alert("{!$Label.Reauthenticate}");
      window.location.href = redir
    };

    window.onload = function() {
      if("{!configSetupStatus}"=="dis") {
        document.getElementById("distext").classList.remove("hidden");
      }
      else if("{!configSetupStatus}"=="nosf" || "{!configSetupStatus}"=="NOT_CONNECTED") {
        document.getElementById("nosftext").classList.remove("hidden");
      }
      else if("{!configSetupStatus}"== "ORG_MISMATCH") {
        document.getElementById("orgmismatchtext").classList.remove("hidden");
      }
      else if("{!configSetupStatus}"=="nocon") {
        document.getElementById("inactivetext").classList.remove("hidden");
      }
      else if("{!configSetupStatus}"=="con") {
        document.getElementById("activetext").classList.remove("hidden");
      }
      else if("{!configSetupStatus}"=="nokey") {
        document.getElementById("nokeytext").classList.remove("hidden");
      }
      var pspgroups = JSON.parse('{!JSENCODE(PSPGroups)}').sort(function (a, b) {
          return a.toLowerCase().localeCompare(b.toLowerCase());
      });
      if(!pspgroups.includes("{!JSENCODE(PSPGroup)}")) {
        pspgroups.push("{!JSENCODE(pspGroup)}");
      }

      for(var i = 0; i < pspgroups.length; i++) {
        addNewGroup(pspgroups[i], "{!JSENCODE(pspGroup)}");
      }
      var pspcons = JSON.parse('{!PSPConnections}');
      if(Object.keys(pspcons).length===0) {
        var noPspMessage = "{!$Label.PSP_Connection_Not_Configured}";
        noPspMessage = noPspMessage.replace('{!$Label.PspGroup_Placeholder}',"{!JSENCODE(pspGroup)}");
        document.getElementById("nopsp").innerText = noPspMessage;
        document.getElementById("nopsp").style.display = "block";
      }
        
      var allCustomerIdDivs = document.getElementsByClassName('customerIdDiv');
      var customerIdString = "{!$Label.Customer_Id_Data}";
      customerIdString = customerIdString.replace('{!$Label.placeholder}', {!customerID});
      if(allCustomerIdDivs != null && allCustomerIdDivs != undefined && allCustomerIdDivs.length > 0 ) {
      	for(var index = 0 ; index < allCustomerIdDivs.length ; index++) {
        	allCustomerIdDivs[index].innerText = customerIdString; 
        }
      }
        
      Object.keys(pspcons).forEach(function(key) {
        var pspconcurdiv = document.createElement("article");
        pspconcurdiv.classList.add("pspconcurblock");
        pspconcurdiv.classList.add("slds-tile");
        var pspconcurheading = document.createElement("div");
        pspconcurheading.innerHTML = key;
        pspconcurheading.classList.add("slds-tile__title");
        pspconcurheading.classList.add("slds-tile__title");
        pspconcurdiv.appendChild(pspconcurheading);

        var arrayLength = pspcons[key].length;
        pspcons[key].forEach(function(index) {
          var pspcondiv = document.createElement("div");
          var pspconmode = index.mode;
          pspcondiv.setAttribute("id", "pspcon-" + key + "-" + pspconmode + "-{!JSENCODE(pspGroup)}");
          pspcondiv.classList.add("slds-tile__detail");
          pspcondiv.classList.add("pspcon");
          pspcondiv.classList.add("psp-connecting");
          var pspcondescdiv = document.createElement("div");
          var pspconmodespan = document.createElement("span");
          pspconmodespan.innerHTML = pspconmode;
          pspconmodespan.classList.add("pspconmode");
          var pspcondescspan = document.createElement("span");
          pspcondescspan.classList.add("pspcondesc");
          var pspdesc = index.type.name;
          if(index.sandbox) {
            pspdesc += " ({!$Label.Test}) "
          }
          else {
            pspdesc += " ({!$Label.Live_Lower_Case}) "
          }
          if(index.description) {
            pspdesc += "- " + index.description;
          }
          pspcondescspan.innerHTML = pspdesc;
          var pspcondelspan = document.createElement("span");
          pspcondelspan.classList.add("pspcondel");
          var dellink = document.createElement("a");
          dellink.onclick = function() {
              var warningMessage = "{!$Label.Delete_Connection_Warning}";
              warningMessage = warningMessage.replace("{!$Label.Key_Placeholder}", key);
              warningMessage = warningMessage.replace("{!$Label.Mode_Placeholder}", pspconmode);
              if(confirm(warningMessage)) {
                  deletePSP(key, pspconmode, "{!JSENCODE(pspGroup)}");
              }
          };
          dellink.innerHTML = "Delete";
          pspcondelspan.appendChild(dellink);
          pspcondescdiv.appendChild(pspconmodespan);
          pspcondescdiv.appendChild(pspcondescspan);
          pspcondescdiv.appendChild(pspcondelspan);
          pspcondiv.appendChild(pspcondescdiv);
          pspconcurdiv.appendChild(pspcondiv);
          checkPSPStatus(key, pspconmode, "{!JSENCODE(pspGroup)}");
        });

        document.getElementById("pspconnections").appendChild(pspconcurdiv);
      });
      checkLive();
    };

    function groupChanged() {
      window.location.href = '/apex/GettingStarted?pspGroup=' + document.getElementById("pspGroupList").value;
    }  

    function promptNewGroup(message,grpName) { 
        if(message == undefined) {
            message = "{!$Label.New_Psp_Group}*:";
        } 
        var groupname = prompt(message,grpName);
        groupname = groupname.replace(/\n/g,' ');
        groupname = groupname.replace(/\r/g,'');
        if(groupname != null && groupname.trim() != '' ) {
            if(checkDuplicateGroupName(groupname)){
                message = "{!$Label.Group_Name_Does_not_Exist}\n{!$Label.New_Psp_Group}*:";
                promptNewGroup(message,groupname);
            } else {
            	addNewGroup(groupname, groupname);
            	groupChanged();
            }
        } else if(groupname != null){ 
            message = "{!$Label.Enter_A_Value}\n{!$Label.New_Psp_Group}*:";
            promptNewGroup(message);
        }
    }
    //Check duplicate group name.
    function checkDuplicateGroupName(groupname) {
        groupname = encodeURIComponent(groupname);
        var groups = new Array();
        var sel = document.getElementById('pspGroupList');
        for (i = 0; i < sel.options.length; i++) {
            groups[i] = sel.options[i].value;
        }
        return groups.map((a) => { return a.toLowerCase() }).includes(groupname.toLowerCase());
    }

    function addNewGroup(groupname, selectedgroupname) {
      var opt = document.createElement('option');
      opt.innerText =  groupname.toString();
      opt.value = encodeURIComponent(groupname.toString());
      if(groupname==selectedgroupname) {
        opt.selected = "selected";
      }
      var sel = document.getElementById('pspGroupList');
      sel.appendChild(opt);
    }

    function checkLive() {
      Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.AsperatoSetupVFController.isLive}',
          function(result, event){
            if (event.status) {
              if(result) {
                document.getElementById("sandboxliveindicator").classList.remove("hidden");
              }
              else {
                document.getElementById("sandboxliveindicator").classList.add("hidden");
              }
            } else if (event.type === 'exception') {
              console.log(event.message + " - " + event.where);
            } else {
              console.log(event.message);
            }
          }
      );
    }

    function resetConnectionDialog() {
      document.getElementById("pspconnectiondialog-currency").selectedIndex = 0;
      document.getElementById("pspconnectiondialog-mode").selectedIndex = 0;
      resetNewPSP();
    }

    function showConnectionDialog() {
      resetConnectionDialog();
      document.getElementById("pspConnectionDialog").classList.remove("hidden");
    }

    function hideConnectionDialog() {
      document.getElementById("pspconnectiondialog-description").className = '';
      document.getElementById("pspConnectionDialog").classList.add("hidden");
    }

    function getAuthDataAsList() {
      var ret = [];
      var idx = 0;
      while(document.getElementById("authVal-" + idx)) {
        ret.push(document.getElementById("authVal-" + idx).value);
        idx++;
      }
      return ret;
    }

    function deletePSP(cur, mode, pspGroup) {
      Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.AsperatoSetupVFController.deleteConnection}',
          cur,
          mode,
          pspGroup,
          function(result, event){
            if (event.status) {
              window.location.reload();
            } else if (event.type === 'exception') {
              console.log(event.message + " - " + event.where);
            } else {
              console.log(event.message);
            }
          }
      );
    }

    function saveSelectedPSP() {
      var cur = document.getElementById("pspconnectiondialog-currency").value;
      var mode = document.getElementById("pspconnectiondialog-mode").value;
      var psptype = document.getElementById("pspconnectiondialog-psp").value;
      var useaspauth = document.getElementById("aspGateway").checked;
      var sandbox = document.querySelector('input[name="pspsandbox"]:checked').value;
      var authData = [];
         var description = '';
      if(!useaspauth) {
          authData = getAuthDataAsList();
          description =  (document.querySelector('input#pspconnectiondialog-description').value).toString();
          var validGroupNameRegEx = new RegExp("^[a-zA-Z0-9_ (){}*\\[\\]\\-:.,]*$");
          if(!validGroupNameRegEx.test(description)){
              description = document.querySelector('input#pspconnectiondialog-description');
              description.className = 'slds-has-error';
              return;
          }
      }
      
      var pspGroup = "{!JSENCODE(pspGroup)}";
      
      Visualforce.remoting.Manager.invokeAction(
          '{!$RemoteAction.AsperatoSetupVFController.updateConnection}',
          cur,
          mode,
          psptype,
          useaspauth,
          sandbox,
          authData,
          description,
          pspGroup,
          function(result, event){
            if (event.status) {
              if(result.oauth) {
                console.log(result.oauth);
                if(!window.open(decodeVal(result.oauth), true)) {
                  alert("{!$Label.Disable_Popup_Blocker}");
                }
              } else if(result.error != null && result.error != '') {
                  if(result.error=='psp connection already exists') {
                      var errorMessage = "{!$Label.Group_Connection_Already_Exists}";
                      errorMessage = errorMessage.replace("{!$Label.Currency_Placeholder}", cur);
                      errorMessage = errorMessage.replace("{!$Label.Mode_Placeholder}", mode);
                      errorMessage = errorMessage.replace("{!$Label.PspGroup_Placeholder}", pspGroup);
                      alert(errorMessage);
                  }
              }
              else {
                window.location.reload(true);
              }
            } else if (event.type === 'exception') {
              console.log(event.message + " - " + event.where);
            } else {
              console.log(event.message);
            }
            hideConnectionDialog();
          }
      );
    }

    function decodeVal(encoded) {
      var elem = document.createElement('textarea');
      elem.innerHTML = encoded;
      return elem.value;
    }

    function resetNewAuth() {
      document.getElementById("pspconnectiondialog-authsection").innerHTML = "";
      checkDialogValidity();
    }

    function appendNewAuth(labelText, authIdx) {
      var root = document.createElement("div");
      root.classList.add("pspconnectiondialog-inputsection");
      var lab = document.createElement("label");
      lab.classList.add("pspconnectiondialog-label");
      lab.classList.add("required");
      lab.innerHTML = labelText + ":";
      var inp = document.createElement("input");
      inp.classList.add("pspconnectiondialog-description");
      inp.setAttribute("id", "authVal-" + authIdx);
      inp.oninput = checkDialogValidity;
      root.appendChild(lab);
      root.appendChild(inp);
      document.getElementById("pspconnectiondialog-authsection").appendChild(root);
      checkDialogValidity();
    }

    function resetNewPSP() {
      resetNewAuth();
      document.getElementById("pspconnectiondialog-psp").options.length = 0;
      document.getElementById("pspconnectiondialog-description").classList.remove("hidden");
      document.getElementById("pspconnectiondialog-description").value = "";
      document.getElementById("pspconnectiondialog-gateway").classList.add("hidden");
      checkDialogValidity();
    }

    function pspSelected() {
      resetNewAuth();
      document.getElementById("pspconnectiondialog-submit").disabled = "disabled";
      var selectedPsp = document.getElementById("pspconnectiondialog-psp").value
      if(pspTypes != undefined) {
      	if(selectedPsp && pspTypes[selectedPsp] && pspTypes[selectedPsp].aspauthavailable) {
            document.getElementById("pspconnectiondialog-gateway").classList.remove("hidden");
            document.getElementById("customGateway").checked = true;
            gatewaychanged("customGateway");
        } else {
        	document.getElementById("pspconnectiondialog-gateway").classList.add("hidden");
            document.getElementById("pspconnectiondialog-description").classList.remove("hidden");
            document.getElementById('pspconnectiondialog-authsection').classList.remove("hidden");
        }
      }
      if(selectedPsp) {
          Visualforce.remoting.Manager.invokeAction(
              '{!$RemoteAction.AsperatoSetupVFController.getAuthLabelsForPsp}',
              document.getElementById("pspconnectiondialog-psp").value,
              function(result, event){
                  if (event.status) {
                      if(result) {
                          var resultLength = result.length;
                          for (var i = 0; i < resultLength; i++) {
                              appendNewAuth(result[i], i);
                          }
                      }
                      checkDialogValidity();
                  } else if (event.type === 'exception') {
                      console.log(event.message + " - " + event.where);
                  } else {
                      console.log(event.message);
                  }
              }
          );
      }
    }

    function checkDialogValidity() {
      var valid = true;
      if(!document.getElementById("pspconnectiondialog-currency").value) valid = false;
      if(!document.getElementById("pspconnectiondialog-mode").value) valid = false;
      if(document.getElementById("pspconnectiondialog-currency").value=="-") valid = false;
      if(document.getElementById("pspconnectiondialog-mode").value=="-") valid = false;
      if(!document.getElementById("pspconnectiondialog-psp").value) valid = false;
      if(!document.getElementById("aspGateway").checked) {
          var idx = 0;
          while(document.getElementById("authVal-" + idx)) {
              if(!document.getElementById("authVal-" + idx).value) valid = false;
              idx++;
          }
      } 
      
      if(valid) {
        document.getElementById("pspconnectiondialog-submit").disabled = "";
      }
      else {
        document.getElementById("pspconnectiondialog-submit").disabled = "disabled";
      }
    }

    function modeSelected() {
      resetNewPSP();
      checkDialogValidity();
      Visualforce.remoting.Manager.invokeAction(
        '{!$RemoteAction.AsperatoSetupVFController.getTypesForMode}',
        document.getElementById("pspconnectiondialog-mode").value,
        function(result, event){
          if (event.status) {
            var resultLength = result.length;
            if(resultLength>0) {
              var opt = document.createElement("option");
              opt.text = "{!$Label.Select_Psp}";
              opt.value = "";
              document.getElementById("pspconnectiondialog-psp").add(opt);
            }
              var resultMap = result.reduce(function(map, obj) {
                    map[obj.psptype] = obj;
                    return map;
                }, {});
              pspTypes = resultMap;
              
            for (var i = 0; i < resultLength; i++) {
              var opt = document.createElement("option");
              opt.text = result[i].name;
              opt.value = result[i].psptype;
              document.getElementById("pspconnectiondialog-psp").add(opt);
            }
            checkDialogValidity();
          } else if (event.type === 'exception') {
            console.log(event.message + " - " + event.where);
          } else {
            console.log(event.message);
          }
        }
      );
    }
    
    function gatewaychanged(gateway) {
        if(gateway == 'customGateway' ) {
        	document.getElementById('pspconnectiondialog-description').classList.remove("hidden");
            document.getElementById('pspconnectiondialog-authsection').classList.remove("hidden");
            checkDialogValidity();
        } else {
            var description  = document.getElementById('pspconnectiondialog-description');
            description.classList.add("hidden");
            if(description.childElementCount > 1) {
               description.children[1].value = '';
            }
            document.getElementById('pspconnectiondialog-authsection').classList.add("hidden");
            
            
            var index = 0;
            while(true) {
                var tagRef = document.getElementById("authVal-" + index);
                if (tagRef) {
                    tagRef.value = '';
                    index++;
                } else {
                    break;
                }
            }
            checkDialogValidity();
        }
    }
</script>

<!-- PSP connection dialog -->
<div id="pspConnectionDialog" class="hidden">
  <section role="dialog" tabindex="-1" aria-modal="true" class="slds-modal slds-fade-in-open">
    <div class="slds-modal__container">
      <div class="slds-modal__content slds-p-around_medium" id="modal-content-id-1">
        <div class="pspconnectiondialog-inputsection">
          <label class="pspconnectiondialog-label required">{!$Label.Currency}:</label>
          <select id="pspconnectiondialog-currency" onchange="checkDialogValidity();">
            <option value="-">{!$Label.Select_Currency}</option>
            <option value="GBP">{!$Label.British_Pound_GBP}</option>
            <option value="USD">{!$Label.U_S_Dollar_USD}</option>
            <option value="EUR">{!$Label.Euro_EUR}</option>
            <option value="AED">{!$Label.UAE_Dirham_AED}</option>
            <option value="AFN">{!$Label.Afghanistan_Afghani_AFN}</option>
            <option value="ALL">{!$Label.Albanian_Lek_ALL}</option>
            <option value="AMD">{!$Label.Armenian_Dram_AMD}</option>
            <option value="ANG">{!$Label.Neth_Antilles_Guilder_ANG}</option>
            <option value="AOA">{!$Label.Angola_Kwanza_AOA}</option>
            <option value="ARS">{!$Label.Argentine_Peso_ARS}</option>
            <option value="AUD">{!$Label.Australian_Dollar_AUD}</option>
            <option value="AWG">{!$Label.Aruba_Florin_AWG}</option>
            <option value="AZN">{!$Label.Azerbaijanian_New_Manat_AZN}</option>
            <option value="BAM">{!$Label.Convertible_Marks_BAM}</option>
            <option value="BBD">{!$Label.Barbados_Dollar_BBD}</option>
            <option value="BDT">{!$Label.Bangladesh_Taka_BDT}</option>
            <option value="BGN">{!$Label.Bulgaria_Lev_BGN}</option>
            <option value="BHD">{!$Label.Bahraini_Dinar_BHD}</option>
            <option value="BIF">{!$Label.Burundi_Franc_BIF}</option>
            <option value="BMD">{!$Label.Bermuda_Dollar_BMD}</option>
            <option value="BND">{!$Label.Brunei_Dollar_BND}</option>
            <option value="BOB">{!$Label.Bolivian_Boliviano_BOB}</option>
            <option value="BOV">{!$Label.Bolivia_Mvdol_BOV}</option>
            <option value="BRB">{!$Label.Brazilian_Cruzeiro_BRB}</option>
            <option value="BRL">{!$Label.Brazilian_Real_BRL}</option>
            <option value="BSD">{!$Label.Bahamian_Dollar_BSD}</option>
            <option value="BTN">{!$Label.Bhutan_Ngultrum_BTN}</option>
            <option value="BWP">{!$Label.Botswana_Pula_BWP}</option>
            <option value="BYN">{!$Label.Belarussian_Ruble_BYN}</option>
            <option value="BZD">{!$Label.Belize_Dollar_BZD}</option>
            <option value="CAD">{!$Label.Canadian_Dollar_CAD}</option>
            <option value="CDF">{!$Label.Franc_Congolais_CDF}</option>
            <option value="CHF">{!$Label.Swiss_Franc_CHF}</option>
            <option value="CLF">{!$Label.Unidades_de_fomento_CLF}</option>
            <option value="CLP">{!$Label.Chilean_Peso_CLP}</option>
            <option value="CNY">{!$Label.Chinese_Yuan_CNY}</option>
            <option value="COP">{!$Label.Colombian_Peso_COP}</option>
            <option value="CRC">{!$Label.Costa_Rica_Colon_CRC}</option>
            <option value="CUP">{!$Label.Cuban_Peso_CUP}</option>
            <option value="CVE">{!$Label.Cape_Verde_Escudo_CVE}</option>
            <option value="CZK">{!$Label.Czech_Koruna_CZK}</option>
            <option value="DJF">{!$Label.Dijibouti_Franc_DJF}</option>
            <option value="DKK">{!$Label.Danish_Krone_DKK}</option>
            <option value="DOP">{!$Label.Dominican_Peso_DOP}</option>
            <option value="DZD">{!$Label.Algerian_Dinar_DZD}</option>
            <option value="EEK">{!$Label.Estonian_Kroon_EEK}</option>
            <option value="EGP">{!$Label.Egyptian_Pound_EGP}</option>
            <option value="ERN">{!$Label.Eritrea_Nakfa_ERN}</option>
            <option value="ETB">{!$Label.Ethiopian_Birr_ETB}</option>
            <option value="FJD">{!$Label.Fiji_Dollar_FJD}</option>
            <option value="FKP">{!$Label.Falkland_Islands_Pound_FKP}</option>
            <option value="GEL">{!$Label.Georgia_Lari_GEL}</option>
            <option value="GHS">{!$Label.Ghanian_Cedi_GHS}</option>
            <option value="GIP">{!$Label.Gibraltar_Pound_GIP}</option>
            <option value="GMD">{!$Label.Gambian_Dalasi_GMD}</option>
            <option value="GNF">{!$Label.Guinea_Franc_GNF}</option>
            <option value="GTQ">{!$Label.Guatemala_Quetzal_GTQ}</option>
            <option value="GYD">{!$Label.Guyana_Dollar_GYD}</option>
            <option value="HKD">{!$Label.Hong_Kong_Dollar_HKD}</option>
            <option value="HNL">{!$Label.Honduras_Lempira_HNL}</option>
            <option value="HRK">{!$Label.Croatian_Kuna_HRK}</option>
            <option value="HTG">{!$Label.Haiti_Gourde_HTG}</option>
            <option value="HUF">{!$Label.Hungarian_Forint_HUF}</option>
            <option value="IDR">{!$Label.Indonesian_Rupiah_IDR}</option>
            <option value="ILS">{!$Label.Israeli_Shekel_ILS}</option>
            <option value="INR">{!$Label.Indian_Rupee_INR}</option>
            <option value="IQD">{!$Label.Iraqi_Dinar_IQD}</option>
            <option value="IRR">{!$Label.Iranian_Rial_IRR}</option>
            <option value="ISK">{!$Label.Iceland_Krona_ISK}</option>
            <option value="JMD">{!$Label.Jamaican_Dollar_JMD}</option>
            <option value="JOD">{!$Label.Jordanian_Dinar_JOD}</option>
            <option value="JPY">{!$Label.Japanese_Yen_JPY}</option>
            <option value="KES">{!$Label.Kenyan_Shilling_KES}</option>
            <option value="KGS">{!$Label.Kyrgyzstan_Som_KGS}</option>
            <option value="KHR">{!$Label.Cambodia_Riel_KHR}</option>
            <option value="KMF">{!$Label.Comoros_Franc_KMF}</option>
            <option value="KPW">{!$Label.North_Korean_Won_KPW}</option>
            <option value="KRW">{!$Label.Korean_Won_KRW}</option>
            <option value="KWD">{!$Label.Kuwaiti_Dinar_KWD}</option>
            <option value="KYD">{!$Label.Cayman_Islands_Dollar_KYD}</option>
            <option value="KZT">{!$Label.Kazakhstan_Tenge_KZT}</option>
            <option value="LAK">{!$Label.Lao_Kip_LAK}</option>
            <option value="LBP">{!$Label.Lebanese_Pound_LBP}</option>
            <option value="LKR">{!$Label.Sri_Lanka_Rupee_LKR}</option>
            <option value="LRD">{!$Label.Liberian_Dollar_LRD}</option>
            <option value="LSL">{!$Label.Lesotho_Loti_LSL}</option>
            <option value="LYD">{!$Label.Libyan_Dinar_LYD}</option>
            <option value="MAD">{!$Label.Moroccan_Dirham_MAD}</option>
            <option value="MDL">{!$Label.Moldovan_Leu_MDL}</option>
            <option value="MGA">{!$Label.Malagasy_Ariary_MGA}</option>
            <option value="MKD">{!$Label.Macedonian_Denar_MKD}</option>
            <option value="MMK">{!$Label.Myanmar_Kyat_MMK}</option>
            <option value="MNT">{!$Label.Mongolian_Tugrik_MNT}</option>
            <option value="MOP">{!$Label.Macau_Pataca_MOP}</option>
            <option value="MRU">{!$Label.Mauritania_Ouguiya_MRU}</option>
            <option value="MUR">{!$Label.Mauritius_Rupee_MUR}</option>
            <option value="MVR">{!$Label.Maldives_Rufiyaa_MVR}</option>
            <option value="MWK">{!$Label.Malawi_Kwacha_MWK}</option>
            <option value="MXN">{!$Label.Mexican_Peso_MXN}</option>
            <option value="MXV">{!$Label.Mexican_Unidad_de_Inversion_UDI_MXV}</option>
            <option value="MYR">{!$Label.Malaysian_Ringgit_MYR}</option>
            <option value="MZN">{!$Label.Mozambique_New_Metical_MZN}</option>
            <option value="NAD">{!$Label.Namibian_Dollar_NAD}</option>
            <option value="NGN">{!$Label.Nigerian_Naira_NGN}</option>
            <option value="NIO">{!$Label.Nicaragua_Cordoba_NIO}</option>
            <option value="NOK">{!$Label.Norwegian_Krone_NOK}</option>
            <option value="NPR">{!$Label.Nepalese_Rupee_NPR}</option>
            <option value="NZD">{!$Label.New_Zealand_Dollar_NZD}</option>
            <option value="OMR">{!$Label.Omani_Rial_OMR}</option>
            <option value="PAB">{!$Label.Panama_Balboa_PAB}</option>
            <option value="PEN">{!$Label.Peruvian_Sol_PEN}</option>
            <option value="PGK">{!$Label.Papua_New_Guinea_Kina_PGK}</option>
            <option value="PHP">{!$Label.Philippine_Peso_PHP}</option>
            <option value="PKR">{!$Label.Pakistani_Rupee_PKR}</option>
            <option value="PLN">{!$Label.Polish_Zloty_PLN}</option>
            <option value="PYG">{!$Label.Paraguayan_Guarani_PYG}</option>
            <option value="QAR">{!$Label.Qatar_Rial_QAR}</option>
            <option value="RON">{!$Label.Romanian_Leu_RON}</option>
            <option value="RSD">{!$Label.Serbian_Dinar_RSD}</option>
            <option value="RUB">{!$Label.Russian_Rouble_RUB}</option>
            <option value="RWF">{!$Label.Rwanda_Franc_RWF}</option>
            <option value="SAR">{!$Label.Saudi_Arabian_Riyal_SAR}</option>
            <option value="SBD">{!$Label.Solomon_Islands_Dollar_SBD}</option>
            <option value="SCR">{!$Label.Seychelles_Rupee_SCR}</option>
            <option value="SDG">{!$Label.Sudanese_Pound_SDG}</option>
            <option value="SEK">{!$Label.Swedish_Krona_SEK}</option>
            <option value="SGD">{!$Label.Singapore_Dollar_SGD}</option>
            <option value="SHP">{!$Label.St_Helena_Pound_SHP}</option>
            <option value="SLL">{!$Label.Sierra_Leone_Leone_SLL}</option>
            <option value="SOS">{!$Label.Somali_Shilling_SOS}</option>
            <option value="SRD">{!$Label.Surinam_Dollar_SRD}</option>
            <option value="SSP">{!$Label.South_Sudan_Pound_SSP}</option>
            <option value="STD">{!$Label.Sao_Tome_Dobra_STD}</option>
            <option value="SYP">{!$Label.Syrian_Pound_SYP}</option>
            <option value="SZL">{!$Label.Swaziland_Lilageni_SZL}</option>
            <option value="THB">{!$Label.Thai_Baht_THB}</option>
            <option value="TJS">{!$Label.Tajik_Somoni_TJS}</option>
            <option value="TMT">{!$Label.Turkmenistan_New_Manat_TMT}</option>
            <option value="TND">{!$Label.Tunisian_Dinar_TND}</option>
            <option value="TOP">{!$Label.Tonga_Pa_anga_TOP}</option>
            <option value="TRY">{!$Label.Turkish_Lira_TRY}</option>
            <option value="TTD">{!$Label.Trinidad_amp_Tobago_Dollar_TTD}</option>
            <option value="TWD">{!$Label.Taiwan_Dollar_TWD}</option>
            <option value="TZS">{!$Label.Tanzanian_Shilling_TZS}</option>
            <option value="UAH">{!$Label.Ukraine_Hryvnia_UAH}</option>
            <option value="UGX">{!$Label.Ugandan_Shilling_UGX}</option>
            <option value="UYU">{!$Label.Uruguayan_New_Peso_UYU}</option>
            <option value="UZS">{!$Label.Uzbekistan_Sum_UZS}</option>
            <option value="VEF">{!$Label.Venezuelan_Bolivar_Fuerte_VEF}</option>
            <option value="VES">{!$Label.Venezuelan_Bolivar_Soberano_VES}</option>
            <option value="VND">{!$Label.Vietnam_Dong_VND}</option>
            <option value="VUV">{!$Label.Vanuatu_Vatu_VUV}</option>
            <option value="WST">{!$Label.Samoa_Tala_WST}</option>
            <option value="XAF">{!$Label.CFA_Franc_BEAC_XAF}</option>
            <option value="XCD">{!$Label.East_Caribbean_Dollar_XCD}</option>
            <option value="XOF">{!$Label.CFA_Franc_BCEAO_XOF}</option>
            <option value="XPF">{!$Label.Pacific_Franc_XPF}</option>
            <option value="YER">{!$Label.Yemen_Riyal_YER}</option>
            <option value="ZAR">{!$Label.South_African_Rand_ZAR}</option>
            <option value="ZMK">{!$Label.Zambian_Kwacha_ZMK}</option>
            <option value="ZWL">{!$Label.Zimbabwe_Dollar_ZWL}</option>
          </select>
        </div>

        <div class="pspconnectiondialog-inputsection">
          <label class="pspconnectiondialog-label required">{!$Label.Mode}:</label>
          <select id="pspconnectiondialog-mode" onchange="modeSelected();">
            <option id="mode-default" value="-">{!$Label.Select_Mode}</option>
            <option value="ECOM">{!$Label.Ecom_Credit_Or_Debit_Card}</option>
            <option value="MOTO">{!$Label.Moto_Credit_Or_Debit_Card}</option>
            <option value="DD">{!$Label.Direct_Debit}</option>
            <option value="EC">{!$Label.Echeck}</option>
            <option value="WALT">{!$Label.PayPal}</option>
          </select>
        </div>

        <div class="pspconnectiondialog-inputsection">
          <label class="pspconnectiondialog-label required">{!$Label.PSP}:</label>
          <select id="pspconnectiondialog-psp" onchange="pspSelected();">
          </select>
        </div>
          
         <div class="pspconnectiondialog-gateway hidden" id="pspconnectiondialog-gateway"> 
             <input type="radio" id="customGateway" name="gateway" value="customGateway" onclick = "gatewaychanged('customGateway')"/>
             <label for="customGateway">{!$Label.Use_Custom_Gateway_Details}</label><br/>
             <input type="radio" id="aspGateway" name="gateway" value="aspGateway" onclick = "gatewaychanged('aspGateway')"/>
             <label for="aspGateway">{!$Label.Use_Asperato_Gateway_Details}</label><br/>
         </div>
        
		<div class="pspconnectiondialog-inputsection" id="pspconnectiondialog-description">
          <label class="pspconnectiondialog-label">{!$Label.Description}:</label>
          <input id="pspconnectiondialog-description" title="{!$Label.Special_Character_Not_allowed}"/>
        </div>

        <div id="pspconnectiondialog-authsection"></div>

        <fieldset class="slds-form-element slds-m-top_small hidden" id="sandboxliveindicator">
            <div class="slds-form-element__control">
                <div class="slds-radio_button-group">
                    <span class="slds-button slds-radio_button">
                        <input type="radio" name="pspsandbox" id="pspsandbox" checked="checked" value="true" />
                        <label class="slds-radio_button__label" for="pspsandbox">
                            <span class="slds-radio_faux">{!$Label.Sandbox}</span>
                        </label>
                    </span>
                    <span class="slds-button slds-radio_button">
                        <input type="radio" name="pspsandbox" id="psplive" value="false" />
                        <label class="slds-radio_button__label" for="psplive">
                            <span class="slds-radio_faux">{!$Label.Live}</span>
                        </label>
                    </span>
                </div>
            </div>
        </fieldset>

      </div>
      <footer class="slds-modal__footer">
        <button onclick="hideConnectionDialog();" class="slds-button slds-button_neutral">{!$Label.Cancel_Camel_Case}</button>
        <button id="pspconnectiondialog-submit" onclick="saveSelectedPSP();" class="slds-button slds-button_brand" disabled="disabled">{!$Label.Create_PSP_connection}</button>
      </footer>
    </div>
  </section>
  <div class="slds-backdrop slds-backdrop_open"></div>
</div>
<!-- End PSP connection dialog -->

<apex:form >
    <div class="panel">
      <div class="hidden" id="activetext">
        <div class="success">{!$Label.Configuration_Is_Set_Up}</div>
        <div>{!$Label.Start_Processing_Payment}</div>
        <div class="slds-m-bottom_x-small customerIdDiv"></div>
          <div class="success">{!$Label.Salesforce_Connection_Is_Active}</div>
          <div class="slds-m-bottom_x-small"><apex:commandButton action="{!getSFConnectionLink}"
              oncomplete="sfConnectRedir('{!createConfigReturnVal}'); "
              value="{!$Label.asp04__reconnect_salesforce}"/></div>
        <div class="slds-m-bottom_x-small">
          <span>{!$Label.Merchant_Group}: </span><select id="pspGroupList" onchange="groupChanged()"></select>
          <a class="addbutton" href="javascript:promptNewGroup()">[{!$Label.Add_Group}]</a>
          <div class="slds-p-top_small">{!$Label.Need_Help_With_Groups} <a href="https://asperato.github.io/userdocs/docs/merchantgroups" target="_blank">{!$Label.Have_A_Look_Link}</a></div>
		   
        </div>

        <button onclick="showConnectionDialog();" type="button">{!$Label.New_PSP_connection}</button>
      </div>
      <div class="hidden" id="nokeytext">
        <div class="big">{!$Label.Upgraded_Older_Version_Message}</div>
        <div>{!$Label.Email_For_Newer_Version_Setup_Message}</div>
        <div class="customerIdDiv"></div>
      </div>
      <div class="hidden error" id="nosftext">
        <div>{!$Label.Need_To_Connect_Salesorce}</div>
        <apex:commandButton action="{!getSFConnectionLink}"
              oncomplete="sfConnectRedir('{!createConfigReturnVal}'); "
              value="{!$Label.asp04__connect_salesforce}"/>
      </div>
      <div class="hidden error" id="orgmismatchtext">
          <div><b>{!$Label.asp04__credentials_do_not_match}</b></div>
        <apex:commandButton action="{!getSFConnectionLink}"
              oncomplete="sfConnectRedir('{!createConfigReturnVal}'); "
              value="{!$Label.asp04__connect_salesforce}"/>
      </div>
      <div class="hidden error" id="distext">
        <div>
            {!$Label.live_connection_disabled}
        </div>
        <div class="customerIdDiv"></div>
      </div>
      <div class="hidden error" id="inactivetext">
        <div class="slds-m-bottom_x-small">{!$Label.configuration_not_set_up}</div>
        <apex:commandButton action="{!createConfigAuto}"
              oncomplete="sfConnectRedir('{!createConfigReturnVal}');"
              onclick="this.disabled=true;"
              value="{!$Label.asp04__setup_configuration}"/>
      </div>

      <div id="pspconnections" class="pspconnections">

      </div>

      <div id="nopsp" class="nopsp">
      
      </div>

      <div id="supportsection" class="supportsection">
        <div><strong>{!$Label.Need_To_Talk}</strong> {!$Label.Contact_Us_text} - <a href="mailto:support@asperato.com">support@asperato.com</a></div>
      </div>

      <apex:actionFunction action="{!createConfigAuto}" name="createConfig">
      </apex:actionFunction>
    </div>
</apex:form>


</apex:page>